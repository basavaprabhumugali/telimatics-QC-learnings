Boot Image component
+-----------------+ 
| boot header     | 1 page
+-----------------+
| kernel          | n pages  
+-----------------+
| ramdisk         | m pages  
+-----------------+
| second stage    | o pages
+-----------------+

n = (kernel_size + page_size - 1) / page_size
m = (ramdisk_size + page_size - 1) / page_size
o = (second_size + page_size - 1) / page_size
0. all entities are page_size aligned in flash
1. kernel and ramdisk are required (size != 0)
2. second is optional (second_size == 0 -> no second)
3. load each element (kernel, ramdisk, second) at
   the specified physical address (kernel_addr, etc)
4. prepare tags at tag_addr.  kernel_args[] is
   appended to the kernel commandline in the tags.
5. r0 = 0, r1 = MACHINE_TYPE, r2 = tags_addr
6. if second_size != 0: jump to second_addr
   else: jump to kernel_addr


struct boot_img_hdr
{
   unsigned char magic[BOOT_MAGIC_SIZE];
   unsigned kernel_size;  /* size in bytes */
   unsigned kernel_addr;  /* physical load addr */
   unsigned ramdisk_size; /* size in bytes */
   unsigned ramdisk_addr; /* physical load addr */
   unsigned second_size;  /* size in bytes */
   unsigned second_addr;  /* physical load addr */
   unsigned tags_addr;    /* physical addr for kernel tags */
   unsigned page_size;    /* flash page size we assume */
   unsigned unused[2];    /* future expansion: should be 0 */
   unsigned char name[BOOT_NAME_SIZE]; /* asciiz product name */
   unsigned char cmdline[BOOT_ARGS_SIZE];
   unsigned id[8]; /* timestamp / checksum / sha1 / etc */
};


BOOT IMG HEADER in source code

#define BOOT_MAGIC "ANDROID!"
#define BOOT_MAGIC_SIZE 8
#define BOOT_NAME_SIZE  16
#define BOOT_ARGS_SIZE  512
#define BOOT_IMG_MAX_PAGE_SIZE 4096
#define BOOT_EXTRA_ARGS_SIZE 1024

#define BOOT_HEADER_VERSION_ZERO 0
/* Struct def for boot image header
  * Bootloader expects the structure of boot_img_hdr with header version
  * BOOT_HEADER_VERSION_ZERO to be as follows:
  */
struct boot_img_hdr_v0 {
    unsigned char magic[BOOT_MAGIC_SIZE];

    unsigned kernel_size;  /* size in bytes */
    unsigned kernel_addr;  /* physical load addr */

    unsigned ramdisk_size; /* size in bytes */
    unsigned ramdisk_addr; /* physical load addr */

    unsigned second_size;  /* size in bytes */
    unsigned second_addr;  /* physical load addr */

    unsigned tags_addr;    /* physical addr for kernel tags */
    unsigned page_size;    /* flash page size we assume */
    unsigned dt_size;      /* device_tree in bytes */
    unsigned unused;    /* future expansion: should be 0 */
#endif
    unsigned char name[BOOT_NAME_SIZE]; /* asciiz product name */

    unsigned char cmdline[BOOT_ARGS_SIZE];

    unsigned id[8]; /* timestamp / checksum / sha1 / etc */

    /* Supplemental command line data; kept here to maintain
        * binary compatibility with older versions of mkbootimg
        */
    uint8_t extra_cmdline[BOOT_EXTRA_ARGS_SIZE];
} __attribute__((packed));
